import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@EnableWebSecurity // Enable Spring Security support
@Configuration // Tells Spring that this class contains beans and configuration
@EnableGlobalMethodSecurity(prePostEnabled = true) // Enable method-level security annotations
public class SecurityConfig {

    @Autowired
    private PasswordEncoder enc; // Dependency injection for password encoder

    @Autowired
    private JwtAuthenticationFilter jwtFilter; // JWT Authentication Filter

    @Autowired
    private CustomAuthenticationEntryPoint authEntry; // Custom authentication entry point

    @Bean
    public SecurityFilterChain authorizeRequests(HttpSecurity http) throws Exception {
        // Define URL-based authorization rules
        http.cors().and() // Enables Cross-Origin Resource Sharing (for React/Angular clients)
            .csrf().disable() // Disabling CSRF as we're using JWT (stateless authentication)
            .exceptionHandling().authenticationEntryPoint(authEntry) // Handle authentication failures
            .and()
            .authorizeRequests()
                .antMatchers("/api/users/register", "/api/users/login", "/v*/api-doc*/**", "/swagger-ui/**").permitAll() // Publicly accessible URLs
                .antMatchers(HttpMethod.OPTIONS).permitAll() // Allow pre-flight OPTIONS requests
                .antMatchers("/api/users/find-by-email/{email}", "/api/users/{id}/friend-requests/pending", 
                             "/api/users/{userId}/friend-requests/count", "/api/users/{userId}/notifications/unread/count").authenticated() // Authenticated users
                .antMatchers("/api/users/{userId}/friend-requests/pending", "/api/users/{userId}/team-requests/count").hasRole("USER") // Only users can view their requests
                .antMatchers("/api/users/{userId}/notifications", "/api/users/{userId}/notifications/read").hasRole("USER") // Notification access
                .antMatchers("/api/users/teams/create", "/api/users/{userId}/team-requests", "/api/users/{userId}/team-request/{teamId}").hasAnyRole("USER", "OWNER") // Team-related actions
                .antMatchers("/api/users").hasRole("ADMIN") // Admin-only access
                .anyRequest().authenticated() // Other endpoints require authentication
            .and()
            .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // Stateless session for JWT
            .and()
            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class); // Insert JWT filter before default filter

        return http.build(); // Return the configured security filter chain
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager(); // Provide AuthenticationManager as a Spring bean
    }
}
