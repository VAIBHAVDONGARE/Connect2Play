package com.connect2play.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.connect2play.dto.NotificationResponseDTO;
import com.connect2play.entities.Notification;
import com.connect2play.entities.User;
import com.connect2play.exception.ResourceNotFoundException;
import com.connect2play.repository.INotificationRepository;
import com.connect2play.repository.IUserRepository;

@Service
@Transactional
public class NotificationServiceImpl implements INotificationService {
	@Autowired
	private INotificationRepository notificationRepository;
	@Autowired
	private IUserRepository userRepository;

	@Autowired
	private ModelMapper modelMapper;

	@Override
	@Transactional
	public Notification createNotification(NotificationResponseDTO notificationDTO) {
		User user = userRepository.findById(notificationDTO.getUserId()).orElseThrow(
				() -> new ResourceNotFoundException("User not found with ID: " + notificationDTO.getUserId()));

		Notification notification = new Notification();
		notification.setUser(user);
		notification.setType(notificationDTO.getType());
		notification.setTitle(notificationDTO.getTitle());
		notification.setMessage(notificationDTO.getMessage());
		notification.setRelatedId(notificationDTO.getRelatedId());
		notification.setRelatedType(notificationDTO.getRelatedType());
		notification.setSentTime(LocalDateTime.now());
		notification.setRead(false);
		notification.setDeleted(false);

		return notificationRepository.save(notification);
	}

	@Override
	public List<NotificationResponseDTO> getUserNotifications(Long userId) {
		List<Notification> notifications = notificationRepository
				.findByUserIdAndIsDeletedFalseOrderBySentTimeDesc(userId);
		return notifications.stream().map(notification -> modelMapper.map(notification, NotificationResponseDTO.class))
				.collect(Collectors.toList());
	}
	
	@Override
	public List<NotificationResponseDTO> getUnreadNotifications(Long userId) {
	    List<Notification> unreadNotifications = notificationRepository.findByUserIdAndIsReadFalseAndIsDeletedFalseOrderBySentTimeDesc(userId);
	    
	    return unreadNotifications.stream()
	            .map(notification -> modelMapper.map(notification, NotificationResponseDTO.class))
	            .collect(Collectors.toList());
	}
	   @Override
	    @Transactional
	    public void markAsRead(Long notificationId) {
	        Notification notification = notificationRepository.findById(notificationId)
	                .orElseThrow(() -> new ResourceNotFoundException("Notification not found with ID: " + notificationId));

	        notification.setRead(true);
	        notification.setReadAt(LocalDateTime.now());
	        notificationRepository.save(notification);
	    }
	   @Override
	    @Transactional
	    public void markAllAsRead(Long userId) {
	        List<Notification> unreadNotifications = notificationRepository.findByUserIdAndIsReadFalseAndIsDeletedFalseOrderBySentTimeDesc(userId);
	        unreadNotifications.forEach(notification -> {
	            notification.setRead(true);
	            notification.setReadAt(LocalDateTime.now());
	        });
	        notificationRepository.saveAll(unreadNotifications);
	    }
	   
	   @Override
	    @Transactional
	    public void deleteNotification(Long notificationId) {
	        Notification notification = notificationRepository.findById(notificationId)
	                .orElseThrow(() -> new ResourceNotFoundException("Notification not found with ID: " + notificationId));

	        notification.setDeleted(true);
	        notificationRepository.save(notification);
	    }
	   
	   @Override
	    @Transactional
	    public void deleteAllReadNotifications(Long userId) {
	        List<Notification> readNotifications = notificationRepository.findByUserIdAndIsReadTrue(userId);
	        readNotifications.forEach(notification -> notification.setDeleted(true));
	        notificationRepository.saveAll(readNotifications);
	    }
}
