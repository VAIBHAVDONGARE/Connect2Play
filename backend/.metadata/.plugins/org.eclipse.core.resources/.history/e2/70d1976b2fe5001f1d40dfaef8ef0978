package com.connect2play.service;

package com.connect2play.service;

import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.connect2play.entities.Challenge;
import com.connect2play.entities.RequestStatus;
import com.connect2play.exception.BadRequestException;
import com.connect2play.repository.IChallengeRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor // Automatically injects dependencies via constructor
@Slf4j // Logging for debugging
public class ChallengeServiceImpl {

    private final IChallengeRepository challengeRepository;

    /**
     * Fetch all challenges sent by a team.
     */
    public List<Challenge> getChallengesSentByTeam(Long challengerId) {
        log.info("Fetching challenges sent by team ID: {}", challengerId);
        return challengeRepository.findByChallengerId(challengerId);
    }

    /**
     * Fetch all challenges received by a team.
     */
    public List<Challenge> getChallengesReceivedByTeam(Long opponentId) {
        log.info("Fetching challenges received by team ID: {}", opponentId);
        return challengeRepository.findByOpponentId(opponentId);
    }

    /**
     * Fetch challenge by ID.
     */
    public Challenge getChallengeById(Long challengeId) {
        log.info("Fetching challenge by ID: {}", challengeId);
        return challengeRepository.findById(challengeId)
                .orElseThrow(() -> new ChallengeNotFoundException("Challenge not found with ID: " + challengeId));
    }

    /**
     * Fetch all challenges where a user is involved (either creator or participant).
     */
    public List<Challenge> getUserChallenges(Long userId) {
        log.info("Fetching all challenges where user ID: {} is involved", userId);
        return challengeRepository.findAllUserChallenges(userId);
    }

    /**
     * Fetch challenges with a specific status (OPEN, ACCEPTED, REJECTED, COMPLETED).
     */
    public List<Challenge> getChallengesByStatus(ChallengeStatus status) {
        log.info("Fetching challenges with status: {}", status);
        return challengeRepository.findByStatus(status);
    }

    /**
     * Create a new challenge.
     */
    @Transactional
    public Challenge createChallenge(Challenge challenge) {
        log.info("Creating a new challenge: {}", challenge);
        return challengeRepository.save(challenge);
    }

    /**
     * Accept or reject a challenge.
     */
    @Transactional
    public void updateChallengeStatus(Long challengeId, ChallengeStatus newStatus) {
        log.info("Updating challenge ID: {} with status: {}", challengeId, newStatus);
        Challenge challenge = getChallengeById(challengeId);

        if (challenge.getStatus() == RequestStatus.ACCEPTED || challenge.getStatus() == RequestStatus.COMPLETED) {
            throw new BadRequestException("Cannot modify an already accepted/completed challenge");
        }

        challenge.setStatus(newStatus);
        challengeRepository.save(challenge);
    }

    /**
     * Delete a challenge by ID.
     */
    @Transactional
    public void deleteChallenge(Long challengeId) {
        log.warn("Deleting challenge ID: {}", challengeId);
        if (!challengeRepository.existsById(challengeId)) {
            throw new ChallengeNotFoundException("Challenge with ID " + challengeId + " not found");
        }
        challengeRepository.deleteChallengeById(challengeId);
    }
}

