package com.connect2play.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true) // Updated for method-level security
public class SecurityConfig {

    private final PasswordEncoder passwordEncoder;
    private final JwtAuthenticationFilter jwtFilter;
    private final CustomAuthenticationEntryPoint authEntry;

    public SecurityConfig(PasswordEncoder passwordEncoder, JwtAuthenticationFilter jwtFilter, 
                          CustomAuthenticationEntryPoint authEntry) {
        this.passwordEncoder = passwordEncoder;
        this.jwtFilter = jwtFilter;
        this.authEntry = authEntry;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .cors().and()
            .csrf(csrf -> csrf.disable())
            .exceptionHandling(ex -> ex.authenticationEntryPoint(authEntry))
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/users/register", "/api/users/login").permitAll()
                .requestMatchers("/v*/api-doc*/**", "/swagger-ui/**").permitAll()
                .requestMatchers(HttpMethod.OPTIONS).permitAll()
                .requestMatchers("/api/users/find-by-email/{email}", 
                                 "/api/users/{id}/friend-requests/pending", 
                                 "/api/users/{userId}/friend-requests/count", 
                                 "/api/users/{userId}/notifications/unread/count").authenticated()
                .requestMatchers("/api/users/{userId}/friend-requests/pending", 
                                 "/api/users/{userId}/team-requests/count").hasAuthority("USER")
                .requestMatchers("/api/users/{userId}/notifications", 
                                 "/api/users/{userId}/notifications/read").hasAuthority("USER")
                .requestMatchers("/api/users/teams/create", 
                                 "/api/users/{userId}/team-requests", 
                                 "/api/users/{userId}/team-request/{teamId}").hasAnyAuthority("USER", "OWNER")
                .requestMatchers("/api/users").hasAuthority("OWNER")
                .anyRequest().authenticated()
                .and()
                .formLogin().disable()
            )
            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}
