//package com.connect2play.controller;
//
//import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.log;
//
//import java.util.List;
//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.data.domain.Page;
//import org.springframework.data.domain.Pageable;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//import org.springframework.security.access.prepost.PreAuthorize;
//import org.springframework.web.bind.annotation.DeleteMapping;
//import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.PathVariable;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.PutMapping;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.RestController;
//
//import com.connect2play.dto.ApiResponseDTO;
//import com.connect2play.dto.FriendRequestResponseDTO;
//import com.connect2play.dto.NotificationResponseDTO;
//import com.connect2play.dto.UserDetailsResponseDTO;
//import com.connect2play.dto.UserFullDetailsResponseDTO;
//import com.connect2play.dto.UserRegistrationDTO;
//import com.connect2play.dto.UserSummaryDTO;
//import com.connect2play.entities.Gender;
//import com.connect2play.entities.UserRole;
//import com.connect2play.service.IUserService;
//
//import jakarta.validation.Valid;
//
//@RestController
//@RequestMapping("/api/users")
//public class UserController {
//
//    @Autowired
//    private IUserService userService;
//
//    // ✅ Register User
//    @PostMapping("/register")
//    public ResponseEntity<ApiResponseDTO> registerUser(@Valid @RequestBody UserRegistrationDTO userDTO) {
//        ApiResponseDTO response = userService.registerUser(userDTO);
//        return ResponseEntity.status(HttpStatus.CREATED).body(response);
//    }
//
//    // ✅ Get User by Email
//    @GetMapping("/email/{email}")
//    public ResponseEntity<UserFullDetailsResponseDTO> getUserByEmail(@PathVariable String email) {
//        return ResponseEntity.ok(userService.findUserByEmail(email));
//    }
//
//    // ✅ Get User by ID
//    @GetMapping("/{id}")
//    public ResponseEntity<UserFullDetailsResponseDTO> getUserById(@PathVariable Long id) {
//        return ResponseEntity.ok(userService.getUserById(id));
//    }
//
//    // ✅ Check Email Availability
//    @GetMapping("/check-email")
//    public ResponseEntity<Boolean> isEmailTaken(@RequestParam String email) {
//        return ResponseEntity.ok(userService.isEmailTaken(email));
//    }
//
//    // ✅ Update User Profile
//    @PutMapping("/{id}")
//    public ResponseEntity<UserDetailsResponseDTO> updateProfile(@PathVariable Long id, 
//            @Valid @RequestBody UserRegistrationDTO userDTO) {
//        return ResponseEntity.ok(userService.updateProfile(id, userDTO));
//    }
//
//    // ✅ Delete User
//    @DeleteMapping("/{id}")
//    public ResponseEntity<ApiResponseDTO> deleteUser(@PathVariable Long id) {
//        userService.deleteUser(id);
//        return ResponseEntity.ok(new ApiResponseDTO("User deleted successfully", java.time.LocalDateTime.now()));
//    }
//
//    // ✅ Search Users (with Pagination)
//    @GetMapping("/search")
//    public ResponseEntity<Page<UserSummaryDTO>> searchUsers(
//            @RequestParam(required = false) String fullName,
//            @RequestParam(required = false) String role,
//            @RequestParam(required = false) String gender,
//            Pageable pageable) {
//        return ResponseEntity.ok(userService.searchUsers(fullName, 
//                role != null ? UserRole.valueOf(role.toUpperCase()) : null, 
//                gender != null ? Gender.valueOf(gender.toUpperCase()) : null, 
//                pageable));
//    }
//
//    // ✅ Friend Requests: Get Pending
//    @GetMapping("/{id}/friend-requests/pending")
//    public ResponseEntity<List<FriendRequestResponseDTO>> getPendingFriendRequests(@PathVariable Long id) {
//        return ResponseEntity.ok(userService.getPendingFriendRequests(id));
//    }
//
//    // ✅ Friend Requests: Send
//    @PostMapping("/{id}/friend-requests/send/{receiverId}")
//    public ResponseEntity<ApiResponseDTO> sendFriendRequest(@PathVariable Long id, @PathVariable Long receiverId) {
//        userService.sendFriendRequest(id, receiverId);
//        return ResponseEntity.ok(new ApiResponseDTO("Friend request sent successfully", java.time.LocalDateTime.now()));
//    }
//
//    // ✅ Friend Requests: Accept
//    @PostMapping("/friend-requests/accept/{requestId}")
//    public ResponseEntity<ApiResponseDTO> acceptFriendRequest(@PathVariable Long requestId) {
//        userService.acceptFriendRequest(requestId);
//        return ResponseEntity.ok(new ApiResponseDTO("Friend request accepted", java.time.LocalDateTime.now()));
//    }
//
//    // ✅ Friend Requests: Reject
//    @PostMapping("/friend-requests/reject/{requestId}")
//    public ResponseEntity<ApiResponseDTO> rejectFriendRequest(@PathVariable Long requestId) {
//        userService.rejectFriendRequest(requestId);
//        return ResponseEntity.ok(new ApiResponseDTO("Friend request rejected", java.time.LocalDateTime.now()));
//    }
//
//    // ✅ Check If Users Are Friends
//    @GetMapping("/friends/check")
//    public ResponseEntity<Boolean> areUsersFriends(@RequestParam Long userId1, @RequestParam Long userId2) {
//        return ResponseEntity.ok(userService.areUsersFriends(userId1, userId2));
//    }
//
//    // ✅ Get Unread Notifications Count
//    @GetMapping("/{id}/notifications/unread-count")
//    public ResponseEntity<Long> getUnreadNotificationsCount(@PathVariable Long id) {
//        return ResponseEntity.ok(userService.countUnreadNotifications(id));
//    }
//
//    // ✅ Get User Notifications
//    @GetMapping("/{id}/notifications")
//    public ResponseEntity<List<NotificationResponseDTO>> getUserNotifications(@PathVariable Long id) {
//        return ResponseEntity.ok(userService.getUserNotifications(id));
//    }
//    
//    @GetMapping
//    @PreAuthorize("hasRole('ADMIN')")
//    public ResponseEntity<ApiResponseDTO<List<UserFullDetailsResponseDTO.java>>> getAllUsers() {
//        log.info("Fetching all users");
//        return ResponseEntity.ok(new ApiResponseDTO<>(true, "Users fetched successfully", userService.getAllUsers()));
//    }
//}
package com.connect2play.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.connect2play.dto.ApiResponseDTO;
import com.connect2play.dto.ChallengeResponseDTO;
import com.connect2play.dto.FriendRequestResponseDTO;
import com.connect2play.dto.NotificationResponseDTO;
import com.connect2play.dto.TeamCreateDTO;
import com.connect2play.dto.TeamRequestCreateDTO;
import com.connect2play.dto.TeamRequestDTO;
import com.connect2play.dto.TeamRequestResponseDTO;
import com.connect2play.dto.UserDetailsResponseDTO;
import com.connect2play.dto.UserFullDetailsResponseDTO;
import com.connect2play.dto.UserRegistrationDTO;
import com.connect2play.dto.UserSummaryDTO;
import com.connect2play.entities.Gender;
import com.connect2play.entities.User;
import com.connect2play.entities.UserRole;
import com.connect2play.service.UserServiceImpl;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
public class UserController {

	private final UserServiceImpl userService;

//      User Registration

	@PostMapping("/register")
	public ResponseEntity<ApiResponseDTO<UserDetailsResponseDTO>> registerUser(
			@Valid @RequestBody UserRegistrationDTO userDto) {
		log.info("Registering new user: {}", userDto.getEmail());
		ApiResponseDTO<UserDetailsResponseDTO> savedUser = userService.registerUser(userDto);
		return ResponseEntity.ok(savedUser);
	}

//     User Login

//    @PostMapping("/login")
//    public ResponseEntity<ApiResponseDTO<AuthResponseDTO>> loginUser(@Valid @RequestBody UserLoginDTO loginDto) {
//        log.info("User login attempt: {}", loginDto.getEmail());
//        return ResponseEntity.ok(new ApiResponseDTO<>(true, "Login successful", userService.loginUser(loginDto)));
//    }

	@GetMapping("/email/{email}")
	public ResponseEntity<UserFullDetailsResponseDTO> getUserByEmail(@PathVariable String email) {
		return ResponseEntity.ok(userService.findUserByEmail(email));
	}

	@GetMapping("/email-check")
	public ResponseEntity<Boolean> isEmailTaken(@RequestParam String email) {
		return ResponseEntity.ok(userService.isEmailTaken(email));
	}

	@PutMapping("/{id}/update")
	public ResponseEntity<UserDetailsResponseDTO> updateUserProfile(@PathVariable Long id,
			@Valid @RequestBody UserRegistrationDTO updatedUserDTO) {
		return ResponseEntity.ok(userService.updateProfile(id, updatedUserDTO));
	}

	// Get users without profile image
	@GetMapping("/without-profile-image")
	public ResponseEntity<List<UserSummaryDTO>> getUsersWithoutProfileImage() {
		return ResponseEntity.ok(userService.findUsersWithoutProfileImage());
	}

//      Get User by ID

	@GetMapping("/{id}")
	public ResponseEntity<ApiResponseDTO<UserFullDetailsResponseDTO>> getUserById(@PathVariable Long id) {
		log.info("Fetching user with ID: {}", id);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "User fetched successfully", userService.getUserById(id)));
	}

	@GetMapping("/with-bio")
	public ResponseEntity<List<UserSummaryDTO>> getUsersWithBio() {
		return ResponseEntity.ok(userService.findUsersWithBio());
	}

	@GetMapping("/search")
	public ResponseEntity<?> searchUsers(@RequestParam(required = false) String fullName,
			@RequestParam(required = false) UserRole role, @RequestParam(required = false) Gender gender,
			@RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size) {
		return ResponseEntity.ok(userService.searchUsers(fullName, role, gender, Pageable.ofSize(size).withPage(page)));
	}

	@GetMapping("/find-by-name")
	public ResponseEntity<?> findUsersByName(@RequestParam String name, @RequestParam(defaultValue = "0") int page,
			@RequestParam(defaultValue = "10") int size) {
		return ResponseEntity.ok(userService.findUsersByName(name, Pageable.ofSize(size).withPage(page)));
	}

	// Find the creator of a team
	@GetMapping("/team-creator/{teamId}")
	public ResponseEntity<Optional<UserSummaryDTO>> findTeamCreator(@PathVariable Long teamId) {
		return ResponseEntity.ok(userService.findTeamCreator(teamId));
	}

	@GetMapping("/{id}/has-created-teams")
	public ResponseEntity<Boolean> hasUserCreatedTeams(@PathVariable Long id) {
		return ResponseEntity.ok(userService.hasUserCreatedTeams(id));
	}

	@GetMapping("/with-teams")
	public ResponseEntity<List<UserSummaryDTO>> findUsersWithTeams() {
		return ResponseEntity.ok(userService.findUsersWithTeams());
	}

//      Get All Users with Pagination (Admin Only)

	@GetMapping
	@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<ApiResponseDTO<Page<UserSummaryDTO>>> getAllUsers(Pageable pageable) {
		log.info("Fetching all users with pagination: {}", pageable);
		return ResponseEntity
				.ok(new ApiResponseDTO<>(true, "Users fetched successfully", userService.getAllUsers(pageable)));
	}

//      Update User Profile

	@PutMapping("/{id}")
	public ResponseEntity<ApiResponseDTO<UserDetailsResponseDTO>> updateUser(@PathVariable Long id,
			@Valid @RequestBody UserRegistrationDTO userDto) {
		log.info("Updating user with ID: {}", id);
		return ResponseEntity
				.ok(new ApiResponseDTO<>(true, "User updated successfully", userService.updateProfile(id, userDto)));
	}

//    /**
//     * Change Password
//     */
//    @PutMapping("/{id}/change-password")
//    public ResponseEntity<ApiResponseDTO<String>> changePassword(@PathVariable Long id, @Valid @RequestBody PasswordChangeDTO passwordDto) {
//        log.info("Changing password for user ID: {}", id);
//        userService.changePassword(id, passwordDto);
//        return ResponseEntity.ok(new ApiResponseDTO<>(true, "Password changed successfully", "Password updated."));
//    }

//      Delete User (Soft Delete)

	@DeleteMapping("/{id}")
	@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<ApiResponseDTO<String>> deleteUser(@PathVariable Long id) {
		log.info("Soft deleting user with ID: {}", id);
		userService.deleteUser(id);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "User soft deleted successfully",
				"User with ID " + id + " has been marked as deleted."));
	}

//      Restore Soft Deleted User

//    @PutMapping("/{id}/restore")
//    @PreAuthorize("hasRole('ADMIN')")
//    public ResponseEntity<ApiResponseDTO<String>> restoreUser(@PathVariable Long id) {
//        log.info("Restoring user with ID: {}", id);
//        userService.restoreUser(id);
//        return ResponseEntity.ok(new ApiResponseDTO<>(true, "User restored successfully", "User with ID " + id + " has been restored."));
//    }

	// Get Pending Friend Requests
	@GetMapping("/{userId}/friend-requests/pending")
	public ResponseEntity<ApiResponseDTO<List<FriendRequestResponseDTO>>> getPendingFriendRequests(
			@PathVariable Long userId) {
		log.info("Fetching pending friend requests for user: {}", userId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Pending friend requests fetched successfully",
				userService.getPendingFriendRequests(userId)));
	}

	// Count Pending Friend Requests
	@GetMapping("/{userId}/friend-requests/count")
	public ResponseEntity<ApiResponseDTO<Long>> countPendingFriendRequests(@PathVariable Long userId) {
		log.info("Counting pending friend requests for user: {}", userId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Count fetched successfully",
				userService.countPendingFriendRequests(userId)));
	}

	// Send Friend Request
	@PostMapping("/{senderId}/friend-requests/{receiverId}")
	public ResponseEntity<ApiResponseDTO<Void>> sendFriendRequest(@PathVariable Long senderId,
			@PathVariable Long receiverId) {
		log.info("User {} sending friend request to {}", senderId, receiverId);
		userService.sendFriendRequest(senderId, receiverId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Friend request sent successfully", null));
	}

	// Accept Friend Request
	@PostMapping("/friend-requests/{requestId}/accept")
	public ResponseEntity<ApiResponseDTO<Void>> acceptFriendRequest(@PathVariable Long requestId) {
		log.info("Accepting friend request with ID: {}", requestId);
		userService.acceptFriendRequest(requestId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Friend request accepted successfully", null));
	}

	// Reject Friend Request
	@PostMapping("/friend-requests/{requestId}/reject")
	public ResponseEntity<ApiResponseDTO<Void>> rejectFriendRequest(@PathVariable Long requestId) {
		log.info("Rejecting friend request with ID: {}", requestId);
		userService.rejectFriendRequest(requestId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Friend request rejected successfully", null));
	}

	// Cancel Friend Request
	@DeleteMapping("/friend-requests/{requestId}/cancel")
	public ResponseEntity<ApiResponseDTO<Void>> cancelFriendRequest(@PathVariable Long requestId) {
		log.info("Canceling friend request with ID: {}", requestId);
		userService.cancelFriendRequest(requestId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Friend request canceled successfully", null));
	}

	// Check if Users are Friends
	@GetMapping("/{userId1}/friends/{userId2}")
	public ResponseEntity<ApiResponseDTO<Boolean>> areUsersFriends(@PathVariable Long userId1,
			@PathVariable Long userId2) {
		log.info("Checking if users {} and {} are friends", userId1, userId2);
		return ResponseEntity.ok(
				new ApiResponseDTO<>(true, "Friendship status checked", userService.areUsersFriends(userId1, userId2)));
	}

	// Count Unread Notifications
	@GetMapping("/{userId}/notifications/unread/count")
	public ResponseEntity<ApiResponseDTO<Long>> countUnreadNotifications(@PathVariable Long userId) {
		log.info("Counting unread notifications for user: {}", userId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Unread notifications count fetched",
				userService.countUnreadNotifications(userId)));
	}

	// Get User Notifications
	@GetMapping("/{userId}/notifications")
	public ResponseEntity<ApiResponseDTO<List<NotificationResponseDTO>>> getUserNotifications(
			@PathVariable Long userId) {
		log.info("Fetching notifications for user: {}", userId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Notifications fetched successfully",
				userService.getUserNotifications(userId)));
	}

	// Mark Notifications as Read
	@PostMapping("/{userId}/notifications/read")
	public ResponseEntity<ApiResponseDTO<Void>> markNotificationsAsRead(@PathVariable Long userId) {
		log.info("Marking notifications as read for user: {}", userId);
		userService.markNotificationsAsRead(userId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Notifications marked as read", null));
	}

	// Count Pending Team Requests
	@GetMapping("/{userId}/team-requests/count")
	public ResponseEntity<ApiResponseDTO<Long>> countPendingTeamRequests(@PathVariable Long userId) {
		log.info("Counting pending team requests for user: {}", userId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Pending team requests count fetched",
				userService.countPendingTeamRequests(userId)));
	}

//    Request To Join Team
	@PostMapping("/{userId}/team-request/{teamId}")
	public ResponseEntity<ApiResponseDTO<TeamRequestCreateDTO>> requestToJoinTeam(@PathVariable Long userId,
			@PathVariable Long teamId, @RequestBody String message) {
		log.info("User {} requesting to join team {}", userId, teamId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Team join request sent",
				userService.requestToJoinTeam(userId, teamId, message)));
	}

//    Pending Requests
	@GetMapping("/{userId}/team-requests")
	public ResponseEntity<List<TeamRequestResponseDTO>> getUserPendingRequests(@PathVariable Long userId) {
		log.info("Fetching pending team requests for user: {}", userId);
		return ResponseEntity.ok(userService.getUserPendingRequests(userId));
	}

	@PostMapping("/team-request/{requestId}/accept")
	public ResponseEntity<ApiResponseDTO<Void>> acceptTeamJoinRequest(@PathVariable Long requestId) {
		log.info("Accepting team join request with ID: {}", requestId);
		userService.acceptTeamJoinRequest(requestId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Team join request accepted", null));
	}

	@PostMapping("/team-request/{requestId}/reject")
	public ResponseEntity<ApiResponseDTO<Void>> rejectTeamJoinRequest(@PathVariable Long requestId) {
		log.info("Rejecting team join request with ID: {}", requestId);
		userService.rejectTeamJoinRequest(requestId);
		return ResponseEntity.ok(new ApiResponseDTO<>(true, "Team join request rejected", null));
	}

	// Count Users by Role
	@GetMapping("/count/role")
	public ResponseEntity<Long> countUsersByRole(@RequestParam UserRole role) {
		return ResponseEntity.ok(userService.countUsersByRole(role));
	}

	// Count Users with Teams
	@GetMapping("/count/with-teams")
	public ResponseEntity<Long> countUsersWithTeams() {
		return ResponseEntity.ok(userService.countUsersWithTeams());
	}

	// Find Most Active Team Creators
	@GetMapping("/teams/active-creators")
	public ResponseEntity<Page<UserSummaryDTO>> findMostActiveTeamCreators(Pageable pageable) {
		return ResponseEntity.ok(userService.findMostActiveTeamCreators(pageable));
	}

	// Find Highly Engaged Users
	@GetMapping("/users/highly-engaged")
	public ResponseEntity<List<UserSummaryDTO>> findHighlyEngagedUsers(@RequestParam int notificationCount) {
		return ResponseEntity.ok(userService.findHighlyEngagedUsers(notificationCount));
	}

	// Create a Team
	@PostMapping("/teams/create")
	public ResponseEntity<Void> createTeam(@RequestParam Long creatorId, @RequestBody TeamCreateDTO teamCreateDTO) {
		UserFullDetailsResponseDTO creatorDTO = userService.getUserById(creatorId);
		User creator = userService.getUserById(creatorId);
		userService.createTeam(creator, teamCreateDTO);
		return ResponseEntity.ok().build();
	}

	// Get Challenges Sent by a User
	@GetMapping("/challenges/sent")
	public ResponseEntity<List<ChallengeResponseDTO>> getChallengesSentByUser(@RequestParam Long userId) {
		return ResponseEntity.ok(userService.getChallengesSentByUser(userId));
	}

	// Get Challenges Received by a User
	@GetMapping("/challenges/received")
	public ResponseEntity<List<ChallengeResponseDTO>> getChallengesReceivedByUser(@RequestParam Long userId) {
		return ResponseEntity.ok(userService.getChallengesReceivedByUser(userId));
	}

	// Get Join Requests for a Team (Paginated)
	@GetMapping("/teams/{teamId}/requests")
	public ResponseEntity<Page<TeamRequestDTO>> getJoinRequests(@PathVariable Long teamId, Pageable pageable) {
		return ResponseEntity.ok(userService.getJoinRequests(teamId, pageable));
	}
}
